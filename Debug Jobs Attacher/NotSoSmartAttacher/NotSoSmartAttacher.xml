<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NotSoSmartAttacher</name>
    </assembly>
    <members>
        <member name="M:VisualStudioAttacher.AttachVisualStudioToProcess(System.Diagnostics.Process,System.Diagnostics.Process)">
            <summary>
            The method to use to attach visual studio to a specified process.
            </summary>
            <param name="visualStudioProcess">
            The visual studio process to attach to.
            </param>
            <param name="applicationProcess">
            The application process that needs to be debugged.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the application process is null.
            </exception>
        </member>
        <member name="M:VisualStudioAttacher.GetVisualStudioForSolutions(System.Collections.Generic.List{System.String})">
            <summary>
            The get visual studio for solutions.
            </summary>
            <param name="solutionNames">
            The solution names.
            </param>
            <returns>
            The <see cref="T:System.Diagnostics.Process"/>.
            </returns>
        </member>
        <member name="M:VisualStudioAttacher.GetVisualStudioForSolution(System.String)">
            <summary>
            The get visual studio process that is running and has the specified solution loaded.
            </summary>
            <param name="solutionName">
            The solution name to look for.
            </param>
            <returns>
            The visual studio <see cref="T:System.Diagnostics.Process"/> with the specified solution name.
            </returns>
        </member>
        <member name="M:WindowsApplication1.ProcessesDialog.CheckRemoteDebuggerPresent(System.IntPtr,System.Boolean@)">
            <summary>
            Import of the kernel for debug check method calls
            </summary>
            <param name="hProcess"> Process to be checked </param>
            <param name="isDebuggerPresent"> Flag, if the process is attached </param>
            <returns></returns>
        </member>
        <member name="F:WindowsApplication1.ProcessesDialog.processesView">
            <summary>
             ListView for the processes
            </summary>
        </member>
        <member name="F:WindowsApplication1.ProcessesDialog.attachButton">
            <summary>
            Attaching button
            </summary>
        </member>
        <member name="F:WindowsApplication1.ProcessesDialog.processesInfoList">
            <summary>
            
            </summary>
        </member>
        <member name="T:NotSoSmartAttacher.Connect">
            <summary>The object for implementing an Add-in.</summary>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:NotSoSmartAttacher.Connect.#ctor">
            <summary>Implements the constructor for the Add-in object. Place your initialization code within this method.</summary>
        </member>
        <member name="M:NotSoSmartAttacher.Connect.OnConnection(System.Object,Extensibility.ext_ConnectMode,System.Object,System.Array@)">
            <summary>Implements the OnConnection method of the IDTExtensibility2 interface. Receives notification that the Add-in is being loaded.</summary>
            <param term='application'>Root object of the host application.</param>
            <param term='connectMode'>Describes how the Add-in is being loaded.</param>
            <param term='addInInst'>Object representing this Add-in.</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:NotSoSmartAttacher.Connect.OnDisconnection(Extensibility.ext_DisconnectMode,System.Array@)">
            <summary>Implements the OnDisconnection method of the IDTExtensibility2 interface. Receives notification that the Add-in is being unloaded.</summary>
            <param term='disconnectMode'>Describes how the Add-in is being unloaded.</param>
            <param term='custom'>Array of parameters that are host application specific.</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:NotSoSmartAttacher.Connect.OnAddInsUpdate(System.Array@)">
            <summary>Implements the OnAddInsUpdate method of the IDTExtensibility2 interface. Receives notification when the collection of Add-ins has changed.</summary>
            <param term='custom'>Array of parameters that are host application specific.</param>
            <seealso class='IDTExtensibility2' />		
        </member>
        <member name="M:NotSoSmartAttacher.Connect.OnStartupComplete(System.Array@)">
            <summary>Implements the OnStartupComplete method of the IDTExtensibility2 interface. Receives notification that the host application has completed loading.</summary>
            <param term='custom'>Array of parameters that are host application specific.</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:NotSoSmartAttacher.Connect.OnBeginShutdown(System.Array@)">
            <summary>Implements the OnBeginShutdown method of the IDTExtensibility2 interface. Receives notification that the host application is being unloaded.</summary>
            <param term='custom'>Array of parameters that are host application specific.</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:NotSoSmartAttacher.Connect.QueryStatus(System.String,EnvDTE.vsCommandStatusTextWanted,EnvDTE.vsCommandStatus@,System.Object@)">
            <summary>Implements the QueryStatus method of the IDTCommandTarget interface. This is called when the command's availability is updated</summary>
            <param term='commandName'>The name of the command to determine state for.</param>
            <param term='neededText'>Text that is needed for the command.</param>
            <param term='status'>The state of the command in the user interface.</param>
            <param term='commandText'>Text requested by the neededText parameter.</param>
            <seealso class='Exec' />
        </member>
        <member name="M:NotSoSmartAttacher.Connect.Exec(System.String,EnvDTE.vsCommandExecOption,System.Object@,System.Object@,System.Boolean@)">
            <summary>Implements the Exec method of the IDTCommandTarget interface. This is called when the command is invoked.</summary>
            <param term='commandName'>The name of the command to execute.</param>
            <param term='executeOption'>Describes how the command should be run.</param>
            <param term='varIn'>Parameters passed from the caller to the command handler.</param>
            <param term='varOut'>Parameters passed from the command handler to the caller.</param>
            <param term='handled'>Informs the caller if the command was handled or not.</param>
            <seealso class='Exec' />
        </member>
    </members>
</doc>
